import sys
from heapq import heappush,heappop
class Graph:
	def __init__(self,V):
		self.V = V 
		self.adj = [[] for _ in range(V)]
	def addEdge(self,u,v,w):
		self.adj[u].append((v,w))
		self.adj[v].append((u,w))

	def prims_mst(self):
		ans = 0
		Q = []
		visited = [False] * self.V 
		
		heappush(Q,(0,0)) # weight , node

		while(Q):
			min_weight,u = heappop(Q)
			if(visited[u] == True):
				continue

			visited[u] = True
			ans += min_weight

			for v,w in self.adj[u]:
				if(not visited[v]):
					heappush(Q,(w,v))
		print("Total minimum spanning tree = ",ans)

def main():
	# N = int(input())
	# E = int(input())

	g = Graph(4)
	g.addEdge(0,1,1)
	g.addEdge(0,3,2)
	g.addEdge(0,2,2)
	g.addEdge(1,2,2)
	g.addEdge(1,3,3)
	g.addEdge(2,3,3)
	g.prims_mst()

if __name__ == '__main__':
	main()




