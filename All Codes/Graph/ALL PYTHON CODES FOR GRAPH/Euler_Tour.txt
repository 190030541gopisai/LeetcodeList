from collections import defaultdict

class Graph:
	def __init__(self,V):
		self.V = V 
		self.adj = defaultdict(list)
		self.timeIn = defaultdict(int)
		self.timeOut = defaultdict(int)
		self.timer = 1

	def addEdge(self,u,v):
		self.adj[u].append(v)
		self.adj[v].append(u)

	def euler_tour1(self,src,visited):
		visited[src] = True 
		print(src, end = " ")

		self.timeIn[src] = self.timer
		self.timer += 1

		for nbr in self.adj[src]:
			if(not visited[nbr]):
				self.euler_tour1(nbr, visited)
				print(src,end = " ")

				self.timeOut[src] = self.timer 
				self.timer += 1

	def euler_tour2(self,src,visited):
		visited[src] = True 
		print(src, end = " ")

		self.timeIn[src] = self.timer
		self.timer += 1

		for nbr in self.adj[src]:
			if(not visited[nbr]):
				self.euler_tour2(nbr, visited)

		print(src,end = " ")
		self.timeOut[src] = self.timer 
		self.timer += 1

	def euler_tour3(self,src,visited):
		visited[src] = True 
		print(src, end = " ")

		self.timer += 1
		self.timeIn[src] = self.timer
		

		for nbr in self.adj[src]:
			if(not visited[nbr]):
				self.euler_tour3(nbr, visited)

		self.timeOut[src] = self.timer 

	def isAncestor(self,x,y):
		if(x > self.V or y > self.V or x<0 or y<0):
			return False
		if(self.timeIn[x] <= self.timeIn[y] and self.timeOut[y] <= self.timeOut[x]):
			return True
		return False






def main():
	g = Graph(9)
	g.addEdge(1,2)
	g.addEdge(1,3)
	g.addEdge(2,4)
	g.addEdge(2,5)
	g.addEdge(2,6)
	g.addEdge(3,7)
	g.addEdge(7,8)
	g.addEdge(7,9)

	# euler tour 1
	visited = defaultdict(int)
	g.timer = 1
	g.euler_tour1(1,visited)
	print()

	# euler tour 2
	visited = defaultdict(int)
	g.timer = 1
	g.timeIn = defaultdict(int)
	g.timeOut = defaultdict(int)
	g.euler_tour2(1,visited)
	print()

	# euler tour 3
	visited = defaultdict(int)
	g.timer = 0
	g.timeIn = defaultdict(int)
	g.timeOut = defaultdict(int)
	g.euler_tour3(1,visited)
	print()

	# for i in range(1,g.V):
	# 	print(i,g.timeIn[i],g.timeOut[i])

	#checking is ancestor of x , y
	# using euler 3 
	print(g.isAncestor(1,9))
	print(g.isAncestor(2,3))
	print(g.isAncestor(2,5))
	print(g.isAncestor(5,2))




if __name__ == '__main__':
	main()


