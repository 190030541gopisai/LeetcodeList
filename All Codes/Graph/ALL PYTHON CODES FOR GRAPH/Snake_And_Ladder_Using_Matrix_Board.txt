from typing import List
#returns minimum no of steps to reach from 1 to n*n 
def snakeAndLadder(board:List[List[int]])->int:
	N = len(board)
	source,destination = (1,N*N)
	visited = [False] * (N * N + 1)
	distance = [-1] * (N * N + 1)
	parent = [-1] * (N * N + 1)
	oned = []
	leftToRight = True
	if(N%2 == 1): # for odd length board
		# it should be right to left
		leftToRight = False
	for i in range(N):
		if(leftToRight):
			for j in range(len(board[i])):
				oned.append(board[i][j])
		else:
			for j in range(len(board[i])-1,-1,-1):
				oned.append(board[i][j])
		leftToRight = not leftToRight # toggle
	oned = oned[::-1]
	q = [source]
	visited[source] = True
	distance[source] = 0
	parent[source] = -1
	while(q):
		node = q.pop(0)
		#neighbors
		if(node == destination):
			break
		for i in range(1,7):
			next_ele = node + i 
			if(next_ele > destination):
				break
			if(oned[next_ele-1] != -1):
				next_ele = oned[next_ele-1]
			if(not visited[next_ele]):
				visited[next_ele] = True
				q.append(next_ele)
				distance[next_ele] = distance[node] + 1
				parent[next_ele] = node
	#printing the trace 
	temp = destination
	while(temp != source):
		print(temp, end = " <- ")
		temp = parent[temp]
	print(source)
	return distance[destination]



def main():
	board = [
	 			[-1,-1,-1,-1,-1,-1],
	 			[-1,-1,-1,-1,-1,-1],
	 			[-1,-1,-1,-1,-1,-1],
	 			[-1,35,-1,-1,13,-1],
	 			[-1,-1,-1,-1,-1,-1],
	 			[-1,15,-1,-1,-1,-1]
	 		]
	ans = snakeAndLadder(board)
	print("Min Steps to Reach from 1 to N*N = ",ans)

if __name__ == '__main__':
	main()

"""
https://leetcode.com/problems/snakes-and-ladders/

https://github.com/MERGHOOB/programmings/blob/874d41ff17263983017261916d8e8778936e5f87/LeetCode/src/array/LC909_SnakesAndLadders.java
"""