import sys
class Graph:
	def __init__(self,V):
		self.V = V 
		self.adj = [[] for _ in range(V)]
	def addEdge(self,u,v,w):
		self.adj[u].append((v,w))
		self.adj[v].append((u,w))

	def prims_mst(self):
		# weight stores the weights array of each key
		key_weight = [sys.maxsize] * self.V  
		parent = [-1] * self.V 
		visited = [False] * self.V 


		#start from 0 node 
		key_weight[0] = 0

		ans = 0 # to store cost
		u = 0
		# in mst only V-1 edges will be there so we loop upto V-1 edges
		for count in range(self.V):
			mini_weight = sys.maxsize
			for v in range(self.V):
				if(visited[v] == False and key_weight[v] < mini_weight):
					mini_weight = key_weight[v]
					u = v 

			if(visited[u] == True):
				continue
			
			visited[u] = True
			ans += mini_weight

			for v,w in self.adj[u]:
				if( visited[v] == False and w < key_weight[v]):
					parent[v] = u 
					key_weight[v] = w 

		for i in range(self.V):
			print(i," ---> ",parent[i])

		print("Total minimum spanning tree = ",ans)

def main():
	# N = int(input())
	# E = int(input())

	g = Graph(4)
	g.addEdge(0,1,1)
	g.addEdge(0,3,2)
	g.addEdge(0,2,2)
	g.addEdge(1,2,2)
	g.addEdge(1,3,3)
	g.addEdge(2,3,3)
	g.prims_mst()

if __name__ == '__main__':
	main()




