from collections import defaultdict


graph = defaultdict(list)



def dfs(cur,par,timer,disc,low,visited):
    print(cur,end = " ")
    disc[cur] = low[cur] = timer
    visited[cur] = True

    for child in graph[cur]:
        if(not visited[child]):
            dfs(child,cur, timer + 1, disc,low,visited)
            low[cur] = min(low[cur], low[child])
        elif(child != par):
            low[cur] = min(low[cur],disc[child])

def addEdge(u,v):
    graph[u].append(v)
    graph[v].append(u)

def main():
    dic = {
        1 : [3,5,6,9],
        3 : [5,7,6,8],
        9 : [12,11],
        5 : [7],
        6 : [2],
        12 : [11],
        2 : [8,4],
        4 : [10]
    }
    for u,val in dic.items():
        for v in val:
            addEdge(u,v) 
    print(graph)
    # low , discovery
    low = defaultdict(int)
    disc = defaultdict(int)
    visited = defaultdict(int)
    dfs(1,1,0,disc,low,visited)
    print()
    for key in disc.keys():
        print(key, disc[key], low[key])

    

if __name__ == '__main__':
    main()