from math import inf
class Graph:
    def __init__(self,V):
        self.V = V
        self.adj = [[] for i in range(V)]
    def addEdge(self,u,v,w):
        self.adj[u].append((v,w))
        # self.adj[v].append((u,w))
    def bellmanford(self,src):
        parent = [-1] * self.V
        
        distance = [inf] * self.V 
        distance[src] = 0
        
        for k in range(1,self.V -1):
            for u in range(self.V):
                for v,w in self.adj[u]:
                    if(distance[u] + w < distance[v]):
                        distance[v] = distance[u] + w
                        parent[v] = u

        # printing the graph
        for i in range(self.V):
            temp = i
            while(temp!=src):
                print(temp,end = " <-- ")
                temp = parent[temp]
            print(src)
            print("distance",i,"= ",distance[i])
            print("===============================")

        # detecting negative cycle for one more time
        flag = 0
        for u in range(self.V):
            for v,w in self.adj[u]:
                if(distance[u] + w < distance[v]):
                    print("Negative Cycle exist")
                    flag = 1
                    break
            if(flag):
                break
        if(flag):
            print("Done Negative cycle exist")
        
def main():
    # g = Graph(6)
    # g.addEdge(0,1,5)
    # g.addEdge(1,2,-2)
    # g.addEdge(1,5,-3)
    # g.addEdge(5,3,1)
    # g.addEdge(3,2,6)
    # g.addEdge(2,4,3)
    # g.addEdge(3,4,-2)
    # ------------------------------------------------

    g = Graph(3)
    g.addEdge(0,1,-2)
    g.addEdge(1,2,-3)
    g.addEdge(2,0,-1)

    g.bellmanford(0)

main()
            

            
        