class DSU:
	def __init__(self,V):
		self.V = V 
		self.parent = [-1] * V 
		self.rank = [1] * V

	def findSet(self,node):
		# print(node)
		if(self.parent[node] == -1):
			return node
		self.parent[node] = self.findSet(self.parent[node])
		return self.parent[node]

	def unionSet(self,x,y):
		s1 = self.findSet(x)
		s2 = self.findSet(y)

		if(s1 != s2):
			if(self.rank[s1] < self.rank[s2]):
				self.parent[s1] = s2
				self.rank[s2] += self.rank[s1]
			else:
				self.parent[s2] = s1
				self.rank[s1] += self.rank[s2]
class Graph:
	def __init__(self,V):
		self.V = V 
		self.edgeList = []

	def addEdge(self,x,y,w):
		self.edgeList.append([ w,x,y ])

	def kruskals_mst(self) -> int:
		ans = 0

		dsu = DSU(self.V)

		self.edgeList.sort()

		for w,u,v in self.edgeList:
			s1 = dsu.findSet(u)
			s2 = dsu.findSet(v)

			if(s1 != s2):
				dsu.unionSet(s1,s2)
				ans += w
		return ans

def main():
	
	# g.addEdge(0,1,1)
	# g.addEdge(1,3,3)
	# g.addEdge(3,2,4)
	# g.addEdge(2,0,2)
	# g.addEdge(0,3,2)
	# g.addEdge(1,2,2)

	N = int(input())
	E = int(input())
	g = Graph(N)
	for _ in range(E):
		u,v,w = list(map(int,input().split()))
		g.addEdge(u-1,v-1,w)

	# print(g.edgeList)
	# print(len(g.edgeList))
	print(g.kruskals_mst())
if __name__ == '__main__':
	main()



