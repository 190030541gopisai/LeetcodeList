#User function Template for python3
from typing import List

#(-1,0) (0,1) (1,0) (0,-1)
directions = ['U','R','D','L']
dx = [-1,0,1,0]
dy = [0,1,0,-1]

class Solution:
    def dfs(self,mat:List[List[int]], n:int, i:int, j:int, path:List[str], result:List[List[str]],visited:List[List[bool]])->None:
        if(i<0 or j<0 or i>=n or j>=n):
            return
        if(mat[i][j]!=1):
            return 
        visited[i][j] = True
        if(i == n-1 and j == n-1):
            temp = "".join(path)
            result.append(temp)
            return
        # 4 directions
        for k in range(4):
            x = i + dx[k]
            y = j + dy[k]
            if(x>=0 and y>=0 and x<n and y<n and mat[x][y] == 1 and not visited[x][y]):
                path.append(directions[k])
                self.dfs(mat,n,x,y,path,result,visited)
                path.pop()
                visited[x][y] = False
    def findPath(self, mat, n):
        # code here
        result = []
        temp = []
        visited = [[False]*n for i in range(n)]
        self.dfs(mat,n,0,0,temp,result,visited)
        return result



#{ 
#  Driver Code Starts
#Initial Template for Python 3

if __name__=='__main__':
    t = int(input())
    for i in range(t):
        n = list(map(int, input().strip().split()))
        arr = list(map(int, input().strip().split()))
        
        matrix = [[0 for i in range(n[0])]for j in range(n[0])]
        k=0
        for i in range(n[0]):
            for j in range(n[0]):
                matrix[i][j] = arr[k]
                k+=1
        ob = Solution()
        result = ob.findPath(matrix, n[0])
        result.sort()
        if len(result) == 0 :
            print(-1)
        else:
            for x in result:
                print(x,end = " ")
            print()
# } Driver Code Ends